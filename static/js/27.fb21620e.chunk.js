(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{100:function(n,a,s){"use strict";function t(n,a){if(!(n instanceof a))throw new TypeError("Cannot call a class as a function")}s.d(a,"a",function(){return t})},101:function(n,a,s){"use strict";function t(n,a){for(var s=0;s<a.length;s++){var t=a[s];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function p(n,a,s){return a&&t(n.prototype,a),s&&t(n,s),n}s.d(a,"a",function(){return p})},102:function(n,a,s){"use strict";function t(n){return(t=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}s.d(a,"a",function(){return t})},103:function(n,a,s){"use strict";function t(n){return(t="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n){return(p="function"===typeof Symbol&&"symbol"===t(Symbol.iterator)?function(n){return t(n)}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":t(n)})(n)}function e(n,a){return!a||"object"!==p(a)&&"function"!==typeof a?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):a}s.d(a,"a",function(){return e})},104:function(n,a,s){"use strict";function t(n,a){return(t=Object.setPrototypeOf||function(n,a){return n.__proto__=a,n})(n,a)}function p(n,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(a&&a.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),a&&t(n,a)}s.d(a,"a",function(){return p})},137:function(n,a,s){"use strict";s.r(a),s.d(a,"readingTime",function(){return g}),s.d(a,"default",function(){return d}),s.d(a,"tableOfContents",function(){return y}),s.d(a,"frontMatter",function(){return f});var t=s(19),p=s(100),e=s(101),o=s(103),c=s(102),u=s(104),l=s(0),i=s.n(l),r=s(28),k=s(138),m=s.n(k),g={text:"5 min read",minutes:4.09,time:245399.99999999997,words:818},d=function(n){function a(n){var s;return Object(p.a)(this,a),(s=Object(o.a)(this,Object(c.a)(a).call(this,n))).layout=null,s}return Object(u.a)(a,n),Object(e.a)(a,[{key:"render",value:function(){var n=this.props,a=n.components;Object(t.a)(n,["components"]);return i.a.createElement(r.MDXTag,{name:"wrapper",components:a},i.a.createElement("div",null,i.a.createElement(r.MDXTag,{name:"p",components:a},"Building React apps are super easy now - thanks to tools like ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"create-react-app"),", but deploying them can still be tricky depending on the platform. I usually use PaaS solutions like ",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://www.netlify.com/"}},"Netlify")," or ",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://www.heroku.com/"}},"Heroku")," to easily deploy my PoC applications with a single command, and use AWS to deploy my production applications. But I was forced to use Azure for my last few projects and it was a bit tricky to use. I\u2019m gonna share ",i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"p"},"how to deploy a Node + React application on Microsoft Azure")," today."),i.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"building-a-react-application"}},"Building a React Application"),i.a.createElement(r.MDXTag,{name:"p",components:a},"Nowadays, building a React app has become super easy. You don\u2019t have to deal with hundreds of lines of Webpack configuration. You don\u2019t have to think about how to optimize your CSS/JS/images, or your chunks, or anything else. The team behind ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"create-react-app")," or other tools like ",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://nextjs.org/"}},"Next.js")," or ",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://www.gatsbyjs.org/"}},"Gatsby")," takes care of all of those things for you."),i.a.createElement(r.MDXTag,{name:"p",components:a},"I usually use ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"create-react-app")," since I don\u2019t use fancy new stuff like CSS-in-JS (how do you handle caching with this?) or Server-side Rendering (SSR), so I\u2019m going to use that here as well. First, create your app:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash","data-language":"bash","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:"create-react-app NewAzureApp\n"}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"We\u2019re going to let Node serve both our React application and the backend API, so let\u2019s add the dependencies for a basic Node API:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash","data-language":"bash","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token function">cd</span> NewAzureApp\n<span class="token function">yarn</span> <span class="token function">add</span> express body-parser cors helmet morgan\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Create a file called ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"app.js")," at the project root:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash","data-language":"bash","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token function">touch</span> app.js\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Then implement a basic API:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// app.js</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cors\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> helmet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'helmet\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'body-parser\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'morgan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">normalizePort</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> port<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span> credentials<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">helmet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">\'dev\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add your API routes under the route `/api`</span>\n<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./api\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/api\'</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Serve the React application</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'build\'</span><span class="token punctuation">,</span> <span class="token string">\'index.html\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token function">normalizePort</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`API listening on port: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Now when you build your React application and run ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"app.js"),", it will automatically serve your app + API together:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-bash","data-language":"bash","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token function">yarn</span> build\nnode app.js\n<span class="token comment"># go to localhost:3000 to see your React app</span>\n<span class="token comment"># you can also access your API endpoints from localhost:3000/api</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"deploying-your-application-on-azure"}},"Deploying Your Application on Azure"),i.a.createElement(r.MDXTag,{name:"p",components:a},"First, you have to create a file called ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"web.config")," to tell Azure how to run your application. Here\u2019s my ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"web.config")," that includes the configuration for Node + React + socket.io (I use it quite often)."),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-xml","data-language":"xml","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">&lt;!-- web.config --\x3e</span>\n<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webSocket</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>handlers</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iisnode<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">verb</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">modules</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iisnode<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>handlers</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rewrite</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rules</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StaticContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rewrite<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>build{PATH_INFO}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DynamicContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/api/*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rewrite<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Socket.io polling<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/socket.io/*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rewrite<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Socket.io websocket<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/sockjs-node/*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rewrite<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>React Routes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conditions</span> <span class="token attr-name">logicalGrouping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MatchAll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{REQUEST_FILENAME}<span class="token punctuation">"</span></span> <span class="token attr-name">matchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IsFile<span class="token punctuation">"</span></span> <span class="token attr-name">negate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{REQUEST_FILENAME}<span class="token punctuation">"</span></span> <span class="token attr-name">matchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IsDirectory<span class="token punctuation">"</span></span> <span class="token attr-name">negate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{REQUEST_URI}<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/api<span class="token punctuation">"</span></span> <span class="token attr-name">negate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>conditions</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rewrite<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>build/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rules</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rewrite</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requestFiltering</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hiddenSegments</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remove</span> <span class="token attr-name">segment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hiddenSegments</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requestFiltering</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpErrors</span> <span class="token attr-name">existingResponse</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PassThrough<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Now we have a running Node + React app that\u2019s also configured for Azure, it\u2019s time to deploy. Go to Azure and create a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Web App"),"."),i.a.createElement("img",{src:m.a,title:"Azure Web App",className:"mb-175"}),i.a.createElement(r.MDXTag,{name:"p",components:a},"You have 2 options to deploy your app on Azure:"),i.a.createElement(r.MDXTag,{name:"ol",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Using ",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"https://docs.microsoft.com/en-us/azure/app-service/deploy-ftp"}},"FTP")),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"Using ",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"li",props:{href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"}},"Azure Pipelines"))),i.a.createElement(r.MDXTag,{name:"p",components:a},"I\u2019m not going to explain the FTP option because it\u2019s pretty straightforward: just upload your whole application using any FTP client to the given server."),i.a.createElement(r.MDXTag,{name:"p",components:a},"For Azure Pipelines (my preferred way), you have to create an ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"azure-pipelines.yml")," at the project root. It\u2019s a file that basically tells Azure how to build your application:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-yaml","data-language":"yaml","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token key atrule">resources</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> <span class="token key atrule">repo</span><span class="token punctuation">:</span> self\n  <span class="token key atrule">fetchDepth</span><span class="token punctuation">:</span> <span class="token number">1</span>\n\n<span class="token key atrule">pool</span><span class="token punctuation">:</span>\n  <span class="token key atrule">vmImage</span><span class="token punctuation">:</span> <span class="token string">\'Ubuntu 16.04\'</span>\n\n<span class="token key atrule">steps</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> <span class="token key atrule">task</span><span class="token punctuation">:</span> NodeTool@0\n  <span class="token key atrule">inputs</span><span class="token punctuation">:</span>\n    <span class="token key atrule">versionSpec</span><span class="token punctuation">:</span> <span class="token string">\'10.x\'</span>\n  <span class="token key atrule">displayName</span><span class="token punctuation">:</span> <span class="token string">\'Install Node.js\'</span>\n\n<span class="token punctuation">-</span> <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n    npm install\n    npm run build</span>\n  <span class="token key atrule">displayName</span><span class="token punctuation">:</span> <span class="token string">\'npm install and build\'</span>\n\n<span class="token punctuation">-</span> <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n    zip -r result.zip . -x .git/**\\* > /dev/null</span>\n  <span class="token key atrule">displayName</span><span class="token punctuation">:</span> <span class="token string">\'package results\'</span>\n\n<span class="token punctuation">-</span> <span class="token key atrule">task</span><span class="token punctuation">:</span> PublishBuildArtifacts@1\n  <span class="token key atrule">inputs</span><span class="token punctuation">:</span>\n    <span class="token key atrule">pathtoPublish</span><span class="token punctuation">:</span> <span class="token string">\'$(Build.SourcesDirectory)/result.zip\'</span> \n    <span class="token key atrule">artifactName</span><span class="token punctuation">:</span> <span class="token string">\'drop\'</span> \n  <span class="token key atrule">displayName</span><span class="token punctuation">:</span> <span class="token string">\'upload artifacts\'</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Now go to your webapp, then go to ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Deployment Center")," under ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Deployment")," menu, and click ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Edit"),". You will be redirected to the Azure Pipelines page, where you will see a tab called ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Triggers"),". Go there to create your build triggers, so that your pipeline runs every time you push a commit to a specific branch."),i.a.createElement(r.MDXTag,{name:"p",components:a},"This is it. After you make another push to your Git remote (e.g. GitHub), your project will be automatically built and deployed. Now you can have a drink and enjoy your Node API + React app on Azure. Let me know if you have any questions, and have a great day.")))}}]),a}(i.a.Component),y=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"building-a-react-application",level:2,title:"Building a React Application",children:[]},{id:"deploying-your-application-on-azure",level:2,title:"Deploying Your Application on Azure",children:[]}]},f={}},138:function(n,a,s){n.exports=s.p+"static/media/azure-webapp.7d59f165.png"}}]);
//# sourceMappingURL=27.fb21620e.chunk.js.map