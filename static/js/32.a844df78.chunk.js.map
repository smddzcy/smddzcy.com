{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","routes/posts/2019-05-15-mongooselike-orm-for-azure-cosmos-db-sql-api/document.mdx"],"names":["_classCallCheck","instance","Constructor","TypeError","__webpack_require__","d","__webpack_exports__","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_typeof2","obj","Symbol","iterator","constructor","_typeof","_possibleConstructorReturn","self","call","ReferenceError","_assertThisInitialized","_setPrototypeOf","p","_inherits","subClass","superClass","create","value","readingTime","text","minutes","time","words","MDXContent","_this","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","layout","_this$props","components","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","react_navi__WEBPACK_IMPORTED_MODULE_8__","href","title","parentName","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","id","React","Component","tableOfContents","arguments","undefined","level","children","frontMatter"],"mappings":"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","file":"static/js/32.a844df78.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","\nimport React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\nexport const readingTime = {\"text\":\"7 min read\",\"minutes\":6.205,\"time\":372300,\"words\":1241}\nimport { Link } from 'react-navi'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<div>\n<MDXTag name=\"p\" components={components}>{`I talked about `}<Link href=\"/posts/2019-05-14/azure-cosmos-db-review\" title=\"Cosmos DB review, pros and cons\">{`pros and cons of Cosmos DB`}</Link>{` in my previous post, and mentioned that we migrated from Cosmos DB Mongo API to SQL API with a few tricks. I’m going to explain those tricks in this post.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We had a large codebase (and a few separate small codebases) using Mongoose queries all over and I didn’t want to change all of them to SQL queries. I find SQL queries hard to read/write/maintain, and also plain ugly. For example, a simple Mongoose query like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'abc'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> sort<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> referenceNo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Translates to a huge Cosmos DB SQL query like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> querySpec <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  query<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SELECT TOP 1 * FROM stores s WHERE s.code = @code ORDER BY s.referenceNo DESC'</span><span class=\\\"token punctuation\\\">,</span>\\n  parameters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'@code'</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'abc'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// assume that your Cosmos DB container is available at `this.container`</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> result<span class=\\\"token punctuation\\\">:</span> items <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>container<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>querySpec<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> items<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`You see the Mongoose query is extremely easy to write and read, while the SQL query requires lots of lines of code and a good SQL knowledge.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It wasn’t the only issue. Even if I loved SQL and wanted to use it everywhere, we were using lots of Mongoose features like hooks, default values, schema field properties like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`trim`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`enum`}</MDXTag>{`, validations and more. Doing all of these with the SQL API seemed very scary, so I just thought writing my own Mongoose-like ORM for Cosmos DB would be much easier. That way I would keep using the amazing Mongoose API as well, so I did that.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"converting-mongo-queries-to-sql-queries\"}}>{`Converting Mongo Queries to SQL Queries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First thing to solve was to convert Mongo queries like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.find`}</MDXTag>{` to SQL queries with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SELECT`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Thankfully, I didn’t have to reinvent the wheel. I found an amazing npm package called `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.npmjs.com/package/mongo-sql\"}}>{`mongo-sql`}</MDXTag>{` that converts Mongo queries to Postgres-style SQL queries, but since Cosmos DB SQL syntax was not exactly `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`SQL`}</MDXTag>{`, it didn’t work well for many queries. So I made a fork of that and patched/changed some stuff to support Cosmos DB queries, and voila. I had my Mongo-Cosmos query converter ready: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/smddzcy/mongo-sql\"}}>{`https://github.com/smddzcy/mongo-sql`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> sqlBuilder <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongo-sql'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// from https://github.com/smddzcy/mongo-sql#master</span>\\n<span class=\\\"token keyword\\\">const</span> sql <span class=\\\"token operator\\\">=</span> sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sql</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'select'</span><span class=\\\"token punctuation\\\">,</span>\\n  table<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'stores'</span><span class=\\\"token punctuation\\\">,</span>\\n  where<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'abc'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  order<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> referenceNo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'desc'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n{ query:\\n   'select * from stores where stores.code = @p1 order by stores.referenceNo desc',\\n  values: [ 'abc' ],\\n  original:\\n   { type: 'select',\\n     table: 'stores',\\n     where: { code: 'abc' },\\n     order: { referenceNo: 'desc' },\\n     __defaultTable: 'stores',\\n     columns: [ '*' ] },\\n  toString: [Function],\\n  toQuery: [Function] }\\n*/</span>\\n<span class=\\\"token keyword\\\">const</span> sqlStr <span class=\\\"token operator\\\">=</span> sql<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// select * from stores where stores.code = @p1 order by stores.referenceNo desc</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"implementing-the-schema-class\"}}>{`Implementing the Schema Class`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The second and the last thing was implementing a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Schema`}</MDXTag>{` class, just like Mongoose’s, which supports hooks, field properties like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`enum`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`default`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`trim`}</MDXTag>{`, and some other features.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`I didn’t implement all the features of Mongoose, since it would be meaningless and it would take lots of my time. I implemented a basic `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Schema`}</MDXTag>{` class that supports `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`enough`}</MDXTag>{` of the features - features that I use. It turned out to be very easy and fun to implement. You can find the final `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Schema`}</MDXTag>{` class and the other related code `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://gist.github.com/smddzcy/acd58d9fc4ae0bb2102b2c5e36df6ea3\"}}>{`in my public gist`}</MDXTag>{`, but here’s how it looks like:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token comment\\\">// schema.js</span>\\n<span class=\\\"token keyword\\\">const</span> _ <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lodash'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> Redis <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ioredis'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> sqlBuilder <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongo-sql'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// from https://github.com/smddzcy/mongo-sql#master</span>\\n<span class=\\\"token keyword\\\">const</span> uuid <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'uuid'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> throat <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'throat'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> DbError <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../error/dbError'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> cast <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../cast'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> client <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CosmosClient</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> endpoint<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'...'</span><span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'...'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> database <span class=\\\"token operator\\\">=</span> client<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">database</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'...'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> cacheTtl <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3600</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> autoAddedFields <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  _rid<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  _self<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  _etag<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  _attachments<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  _ts<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Schema</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">schema<span class=\\\"token punctuation\\\">,</span> options</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token function\\\">addHook</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">type<span class=\\\"token punctuation\\\">,</span> hook</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>hooks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">,</span> hook <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">_runHooks</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">type<span class=\\\"token punctuation\\\">,</span> object</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>hooks\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">hook</span> <span class=\\\"token operator\\\">=></span> hook<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> type<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">hook</span> <span class=\\\"token operator\\\">=></span> hook<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hook</span><span class=\\\"token punctuation\\\">(</span>object<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> object<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">obj<span class=\\\"token punctuation\\\">,</span> isRead <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">el</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>el<span class=\\\"token punctuation\\\">,</span> isRead<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token keyword\\\">return</span> ret<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">model<span class=\\\"token punctuation\\\">,</span> options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> deleteCache<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> runHooks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> now <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>timestamps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'createdAt'</span> <span class=\\\"token keyword\\\">in</span> model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        model<span class=\\\"token punctuation\\\">.</span>createdAt <span class=\\\"token operator\\\">=</span> now<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'updatedAt'</span> <span class=\\\"token keyword\\\">in</span> model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        model<span class=\\\"token punctuation\\\">.</span>updatedAt <span class=\\\"token operator\\\">=</span> now<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// map defaults etc</span>\\n    <span class=\\\"token keyword\\\">const</span> mappedModel <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>model<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>runHooks<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_runHooks</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'beforeCreate'</span><span class=\\\"token punctuation\\\">,</span> mappedModel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>deleteCache<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_deleteCacheForType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sql'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>mappedModel<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// see: https://github.com/Azure/azure-cosmos-js/issues/241</span>\\n      mappedModel<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">=</span> uuid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">v4</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> body <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_container<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>mappedModel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>body<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">_find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">query<span class=\\\"token punctuation\\\">,</span> options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> sql <span class=\\\"token operator\\\">=</span> sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sql</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'select'</span><span class=\\\"token punctuation\\\">,</span>\\n      table<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>collection<span class=\\\"token punctuation\\\">,</span>\\n      where<span class=\\\"token punctuation\\\">:</span> query<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token operator\\\">...</span>options<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> sqlStr <span class=\\\"token operator\\\">=</span> sql<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> params <span class=\\\"token operator\\\">=</span> sql<span class=\\\"token punctuation\\\">.</span>values<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">value<span class=\\\"token punctuation\\\">,</span> idx</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`@p</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>idx <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> cacheLabel <span class=\\\"token operator\\\">=</span> sqlStr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/@(p\\\\d*)/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token operator\\\">...</span>args</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`'</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>params<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">v</span> <span class=\\\"token operator\\\">=></span> v<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">===</span> args<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">'`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// get the docs from cache or db</span>\\n    <span class=\\\"token keyword\\\">const</span> mappedDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_getFromCacheOrSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sql'</span><span class=\\\"token punctuation\\\">,</span> cacheLabel<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> querySpec <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        query<span class=\\\"token punctuation\\\">:</span> sqlStr<span class=\\\"token punctuation\\\">,</span>\\n        parameters<span class=\\\"token punctuation\\\">:</span> params<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> result<span class=\\\"token punctuation\\\">:</span> items <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_container<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>querySpec<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        enableCrossPartitionQuery<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> items<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// make the populations, if any requested</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>populate <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>populate<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>populate<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token parameter\\\">field</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>schema<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DbError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>field<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> does not exist in the schema`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>schema<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>ref<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DbError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>field<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> does not have a 'ref' field`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Schema<span class=\\\"token punctuation\\\">.</span>_registeredModels<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>schema<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>ref<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DbError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>schema<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>ref<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not a registered model`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token keyword\\\">const</span> model <span class=\\\"token operator\\\">=</span> Schema<span class=\\\"token punctuation\\\">.</span>_registeredModels<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>schema<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>ref<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">const</span> ids <span class=\\\"token operator\\\">=</span> _<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">uniq</span><span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compact</span><span class=\\\"token punctuation\\\">(</span>mappedDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">doc</span> <span class=\\\"token operator\\\">=></span> doc<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">const</span> docs <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>\\n            ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token parameter\\\">id</span> <span class=\\\"token operator\\\">=></span> model<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findById</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">const</span> idToDoc <span class=\\\"token operator\\\">=</span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">xs<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">,</span> idx</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            xs<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> model<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token punctuation\\\">[</span>idx<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> xs<span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          mappedDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">mappedDoc</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>mappedDoc<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&amp;&amp;</span> idToDoc<span class=\\\"token punctuation\\\">[</span>mappedDoc<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              mappedDoc<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> idToDoc<span class=\\\"token punctuation\\\">[</span>mappedDoc<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n              mappedDoc<span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> mappedDocs<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">query<span class=\\\"token punctuation\\\">,</span> options</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>query <span class=\\\"token operator\\\">||</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>options <span class=\\\"token operator\\\">||</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// minor optimization</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_find</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">query<span class=\\\"token punctuation\\\">,</span> options</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    options <span class=\\\"token operator\\\">=</span> options <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_find</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>options<span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>ignored<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// single-partition query failed, try cross-partition</span>\\n      items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_find</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> items<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> Schema<span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Also here’s how a model looks like:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> Schema <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./schema'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> Store <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> trim<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> trim<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  referenceNo<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// ... other fields</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Store'</span><span class=\\\"token punctuation\\\">,</span>\\n  collection<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'stores'</span><span class=\\\"token punctuation\\\">,</span>\\n  partitionKey<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">,</span>\\n  timestamps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// you can add hooks</span>\\nStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addHook</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'beforeCreate'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">obj</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// auto-increment referenceNo</span>\\n  <span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> order<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> referenceNo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'desc'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  obj<span class=\\\"token punctuation\\\">.</span>referenceNo <span class=\\\"token operator\\\">=</span> store<span class=\\\"token punctuation\\\">.</span>referenceNo <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> Store<span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then I could use Cosmos DB as if I was using Mongoose. All of my queries are automatically turned into SQL queries:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Store<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">{</span> code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'abc'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> order<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> referenceNo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'desc'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// SQL query run in the background:</span>\\n<span class=\\\"token comment\\\">// 'select * from stores where stores.code = @p1 order by stores.referenceNo desc'</span>\\n<span class=\\\"token comment\\\">// @p1 parameter = 'abc'</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`I hope this will help you deal with ugly SQL queries and actually enjoy using Cosmos DB. Have a great day!`}</MDXTag>\n</div>\n           </MDXTag>\n  }\n}\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"converting-mongo-queries-to-sql-queries\",\n    level: 2,\n    title: \"Converting Mongo Queries to SQL Queries\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"implementing-the-schema-class\",\n    level: 2,\n    title: \"Implementing the Schema Class\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}