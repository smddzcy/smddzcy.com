{"version":3,"sources":["components/TagPage.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/TagIndexPage.js","components/TagPage.js","routes/tags.js"],"names":["module","exports","TagPage","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","Symbol","iterator","Object","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","TagIndexPage","props","react_default","a","createElement","className","styles","tags","map","tag","key","href","dist_es","name","count","_ref","blogRoot","routes","route","url","ArticleSummary","crawlRoutes","_callee4","root","_ref2","paths","regenerator_default","wrap","_context4","prev","next","cache","crawl","context","crawlingRoutes","sent","resolve","method","urls","abrupt","stop","tagRoutes","compose","withContext","req","objectSpread","tagsRoot","mountpath","withCrawlerPatterns","/:tag","_tag","asyncToGenerator","mark","_callee","_context","t0","getAvailableTagsFromRoutes","t1","t2","concat","_x2","_x3","apply","this","arguments","mount","/","title","getView","_getView","_callee2","_context2","fromPairs","toLowerCase","forEach","data","push","components_TagIndexPage","join","_x4","_x5","getTitle","params","_getView2","_callee3","lowerCaseTag","_context3","find","metaTag","components_TagPage","_x6","_x7","Set"],"mappings":"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","file":"static/js/1.6a69a664.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__1unF8\"};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import React from 'react';\nimport { Link } from 'react-navi';\nimport styles from './TagIndexPage.module.css';\n\nfunction TagIndexPage(props) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {props.tags.map(tag => (\n          <li key={tag.href}>\n            <Link href={tag.href}>{tag.name} ({tag.count})</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TagIndexPage;\n","import React from 'react';\nimport ArticleSummary from './ArticleSummary';\nimport styles from './TagPage.module.css';\n\nfunction TagPage({ blogRoot, name, routes }) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TagPage;\n","import React from 'react';\nimport {\n  compose, crawl, mount, resolve, route, withContext, withCrawlerPatterns,\n} from 'navi';\nimport { join } from 'path';\nimport { fromPairs } from 'lodash';\nimport TagIndexPage from '../components/TagIndexPage';\nimport TagPage from '../components/TagPage';\nimport routes from './index';\n\nasync function crawlRoutes(root) {\n  if (!crawlRoutes.cache[root]) {\n    const { paths } = await crawl({\n      context: {\n        crawlingRoutes: true,\n      },\n      root,\n      routes,\n    });\n    crawlRoutes.cache[root] = await resolve({\n      method: 'HEAD',\n      routes,\n      urls: paths,\n    });\n  }\n  return crawlRoutes.cache[root];\n}\ncrawlRoutes.cache = {};\n\nconst tagRoutes = compose(\n  withContext((req, context) => ({\n    ...context,\n    tagsRoot: req.mountpath,\n  })),\n  withCrawlerPatterns({\n    '/:tag': async (req, context) => {\n      if (!context.crawlingRoutes) {\n        return getAvailableTagsFromRoutes(\n          await crawlRoutes(context.blogRoot)\n        ).map(tag => `/${tag}`);\n      }\n      return [];\n    },\n  }),\n  mount({\n    '/': route({\n      title: 'Tags',\n\n      getView: async (req, context) => {\n        // Build a list of pages for each tag\n        const routes = await crawlRoutes(context.blogRoot);\n        const tags = getAvailableTagsFromRoutes(routes);\n        const tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]));\n        routes.forEach(route => {\n          const { data } = route;\n          if (data && data.tags) {\n            data.tags.forEach(tag => {\n              tag = tag.toLowerCase();\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route);\n              }\n            });\n          }\n        });\n\n        return (\n          <TagIndexPage\n            blogRoot={context.blogRoot}\n            tags={tags.map(name => ({\n              name,\n              href: join(req.mountpath, name.toLowerCase()),\n              count: (tagRoutes[name] || []).length,\n            }))}\n          />\n        );\n      },\n    }),\n\n    '/:tag': route({\n      getTitle: req => req.params.tag,\n      getView: async (req, context) => {\n        const lowerCaseTag = req.params.tag.toLowerCase();\n        const routes = await crawlRoutes(context.blogRoot);\n\n        // Build a list of pages that include the tag from the site map\n        const tagRoutes = [];\n        routes.forEach(route => {\n          const tags = (route.data && route.data.tags) || [];\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\n            tagRoutes.push(route);\n          }\n        });\n\n        return (\n          <TagPage\n            blogRoot={context.blogRoot}\n            name={req.params.tag}\n            routes={tagRoutes}\n          />\n        );\n      },\n    }),\n  }),\n);\n\nfunction getAvailableTagsFromRoutes(routes) {\n  return Array.from(\n    new Set(\n      [].concat(...routes.map(route => (route.data && route.data.tags) || [])),\n    ),\n  );\n}\n\nexport default tagRoutes;\n"],"sourceRoot":""}