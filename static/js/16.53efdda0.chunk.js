(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{100:function(n,a,e){"use strict";function t(n,a){for(var e=0;e<a.length;e++){var t=a[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function s(n,a,e){return a&&t(n.prototype,a),e&&t(n,e),n}e.d(a,"a",function(){return s})},101:function(n,a,e){"use strict";function t(n){return(t=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}e.d(a,"a",function(){return t})},102:function(n,a,e){"use strict";function t(n){return(t="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function s(n){return(s="function"===typeof Symbol&&"symbol"===t(Symbol.iterator)?function(n){return t(n)}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":t(n)})(n)}function o(n,a){return!a||"object"!==s(a)&&"function"!==typeof a?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):a}e.d(a,"a",function(){return o})},103:function(n,a,e){"use strict";function t(n,a){return(t=Object.setPrototypeOf||function(n,a){return n.__proto__=a,n})(n,a)}function s(n,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(a&&a.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),a&&t(n,a)}e.d(a,"a",function(){return s})},118:function(n,a,e){"use strict";e.r(a),e.d(a,"readingTime",function(){return u}),e.d(a,"default",function(){return g}),e.d(a,"tableOfContents",function(){return f}),e.d(a,"frontMatter",function(){return d});var t=e(17),s=e(99),o=e(100),p=e(102),c=e(101),r=e(103),l=e(0),i=e.n(l),m=e(26),u={text:"4 min read",minutes:3.04,time:182400,words:608},g=function(n){function a(n){var e;return Object(s.a)(this,a),(e=Object(p.a)(this,Object(c.a)(a).call(this,n))).layout=null,e}return Object(r.a)(a,n),Object(o.a)(a,[{key:"render",value:function(){var n=this.props,a=n.components;Object(t.a)(n,["components"]);return i.a.createElement(m.MDXTag,{name:"wrapper",components:a},i.a.createElement("div",null,i.a.createElement(m.MDXTag,{name:"p",components:a},"Although\xa0I don\u2019t prefer Java as my day-to-day language - mostly because of the sizes of my projects, it is a language that I really like programming in. A single Java code can run on almost all types of machines, the syntax is great, it is full OOP - something I really like, it has so many quality libraries to chose from and the list goes on. It has\xa0its bad parts, too. The\xa0major problem that affects my preference\xa0about Java, I think most of you out there will agree with me, is verbosity. But a big\xa0step was taken in\xa0Java 8 to a more functional & less verbose programming language. One of the most important features of Java 8\xa0is ",i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},"lambda expressions"),"."),i.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"example"}},"Example"),i.a.createElement(m.MDXTag,{name:"p",components:a},"Creating a Comparator\xa0before Java 8 was like this:"),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> beforeJava8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> o1 <span class="token operator">-</span> o2<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"p",components:a},"With Java 8, it\u2019s like this:"),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> withJava8 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">;</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"p",components:a},"Right part of the\xa0expression above,\xa0",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"(o1, o2) -> o1 - o2"),"\xa0 is a ",i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},"lambda expression"),". It takes ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"o1"),", ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"o2"),"\xa0\xa0as parameters of the ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"compare")," method of ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Comparator"),", and returns ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"o1 - o2"),"\xa0. ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"->"),"\xa0 is the separator - called\xa0",i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},"lambda operator"),", of the lambda expression. It separates ",i.a.createElement(m.MDXTag,{name:"strong",components:a,parentName:"p"},"parameters")," from the ",i.a.createElement(m.MDXTag,{name:"strong",components:a,parentName:"p"},"body")," of the lambda expression. In a\xa0lambda expression,\xa0we don\u2019t have to declare\xa0the types explicitly. Java can determine the types from the context. Since the type we declared as arguments of\xa0Comparator\xa0is Integer\xa0, Java can infer the types of\xa0",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"o1")," and ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"o2")," as ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Integer"),". But if we remove the type from the Comparator\xa0declaration and write something like this, ",i.a.createElement(m.MDXTag,{name:"strong",components:a,parentName:"p"},"code will not compile")," since Java can\u2019t infer the types."),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Comparator</span> withJava8 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">;</span> <span class="token comment">// fails to compile</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"p",components:a},"By the way, lambdas are not just\xa0fancied\xa0anonymous\xa0classes. They separate themselves from anonymous\xa0classes in the lower levels of Java. Some of the differences between them\xa0are listed\xa0below."),i.a.createElement(m.MDXTag,{name:"ul",components:a},i.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"Lambdas are not implemented using anonymous classes; meaning they don\u2019t take space in the disk as .class\xa0 files and it speeds up the start time of JVM."),i.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"Types used in lambdas are not explicit, they are determined from the context."),i.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"Variables cannot be shadowed in a lambda expression. If attempted, it gives a compile time error."),i.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"this\xa0refers to the class that uses\xa0the lambda expression. On anonymous classes, it refers to anonymous class itself.")),i.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"how-it-works"}},"How it works"),i.a.createElement(m.MDXTag,{name:"p",components:a},"If we look at the declaration of\xa0Comparator interface, we see a new annotation."),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"p",components:a},i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},i.a.createElement(m.MDXTag,{name:"strong",components:a,parentName:"em"},"Lambdas\xa0can\xa0only be used on functional interfaces,\xa0which has\xa0exactly one abstract method.\xa0"),"(Default methods\xa0aren\u2019t counted as abstract)")," ",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"@FunctionalInterface"),"\xa0annotation is not something that functional interfaces\xa0",i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},"must")," have, but it\u2019s a good sign both for us and the Java\xa0to understand that an interface is a functional interface. Do we have to write all of the functional interfaces we\u2019re going to use ? Of course not. Java 8 comes with a great number of functional interfaces, located in\xa0",i.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"java.util.function"),"\xa0package."),i.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"javautilfunctionconsumer"}},"java.util.function.Consumer"),i.a.createElement(m.MDXTag,{name:"p",components:a},"Consumer interface performs an operation on an argument."),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"javautilfunctionsupplier"}},"java.util.function.Supplier"),i.a.createElement(m.MDXTag,{name:"p",components:a},"Supplier interface takes no argument, but produces a\xa0result."),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"javautilfunctionfunction"}},"java.util.function.Function"),i.a.createElement(m.MDXTag,{name:"p",components:a},"Function interface takes one argument, and produces a result."),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"javautilfunctionpredicate"}},"java.util.function.Predicate"),i.a.createElement(m.MDXTag,{name:"p",components:a},"Predicate interface takes one\xa0argument, and returns the result of an evaluation on that argument."),i.a.createElement(m.MDXTag,{name:"pre",components:a},i.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-java","data-language":"java","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(m.MDXTag,{name:"p",components:a},"Another great feature of Java 8 is ",i.a.createElement(m.MDXTag,{name:"strong",components:a,parentName:"p"},"Stream API"),", which\xa0will be covered on\xa0a later post. It provides a greater functionality to Java, and also it is a\xa0",i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},"perfect fit")," for lambda expressions. Until then, ",i.a.createElement(m.MDXTag,{name:"em",components:a,parentName:"p"},"Val\xe9te!"))))}}]),a}(i.a.Component),f=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"example",level:2,title:"Example",children:[]},{id:"how-it-works",level:2,title:"How it works",children:[{id:"javautilfunctionconsumer",level:3,title:"java.util.function.Consumer",children:[]},{id:"javautilfunctionsupplier",level:3,title:"java.util.function.Supplier",children:[]},{id:"javautilfunctionfunction",level:3,title:"java.util.function.Function",children:[]},{id:"javautilfunctionpredicate",level:3,title:"java.util.function.Predicate",children:[]}]}]},d={}},99:function(n,a,e){"use strict";function t(n,a){if(!(n instanceof a))throw new TypeError("Cannot call a class as a function")}e.d(a,"a",function(){return t})}}]);
//# sourceMappingURL=16.53efdda0.chunk.js.map