{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","routes/posts/2017-01-22-thread-synchronization-java/document.mdx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","__webpack_require__","d","__webpack_exports__","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_typeof2","obj","Symbol","iterator","constructor","_typeof","_possibleConstructorReturn","self","call","ReferenceError","_assertThisInitialized","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","create","value","readingTime","text","minutes","time","words","MDXContent","_this","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","layout","_this$props","components","_Users_samedduzcay_Desktop_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","parentName","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","id","href","React","Component","tableOfContents","arguments","undefined","level","title","children","frontMatter","_classCallCheck","instance"],"mappings":"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","file":"static/js/20.16acc210.chunk.js","sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","\nimport React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\nexport const readingTime = {\"text\":\"5 min read\",\"minutes\":4.3,\"time\":258000,\"words\":860}\n\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><div>\n<MDXTag name=\"p\" components={components}>{`Today I’m going to talk about `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`thread synchronization`}</MDXTag>{`. Let’s start with writing a simple multi-threaded counter.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-java\",\"data-language\":\"java\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CounterThread</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Thread</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">CounterThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token annotation punctuation\\\">@Override</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Thread:%s, counter:%d\\\\\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span>\\\\<span class=\\\"token punctuation\\\">[</span>\\\\<span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token class-name\\\">Thread</span> t1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CounterThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"t1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token class-name\\\">Thread</span> t2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CounterThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"t2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    t1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    t2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We expect to see a nice incrementation of the count variable, sometimes by the thread 1 and sometimes by the thread 2. Here is the output this code produces:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`Thread:t2, counter:0\nThread:t1, counter:0\nThread:t1, counter:2\nThread:t1, counter:3\nThread:t1, counter:4\nThread:t1, counter:5\nThread:t2, counter:1\nThread:t2, counter:7\nThread:t2, counter:8\nThread:t2, counter:9\nThread:t1, counter:6\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is definitely not the outcome we expected. What is wrong with those first 2 lines? Thread `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`t2`}</MDXTag>{` increases the counter to 1, so the second line should’ve been `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Thread:t1, counter:1`}</MDXTag>{`, right?`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`NO`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the example above, there is the possibility that both threads access the variable and increment it at the same time. It’s called `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`race condition`}</MDXTag>{`. Because the thread scheduling algorithm can swap between threads at any time; we don’t know the execution order of the threads, and we don’t know when they will try to access the shared data. The result is; multiple threads `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`racing`}</MDXTag>{` to access and change the data.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are many ways to overcome this problem. Here I’ll provide you two of them that I use the most.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"monitors\"}}>{`Monitors`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In Java, synchronization is built around an internal entity of an object known as `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`intrinsic lock`}</MDXTag>{` or `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`monitor`}</MDXTag>{`. Every object has an intrinsic lock associated with it, and Java uses that to synchronize the object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want to prevent your threads from accessing the shared data at the same time, you can simply use the builtin synchronized keyword.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-java\",\"data-language\":\"java\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CounterThread</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Thread</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token class-name\\\">Object</span> lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">CounterThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token annotation punctuation\\\">@Override</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">synchronized</span> <span class=\\\"token punctuation\\\">(</span>lock<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Thread:%s, counter:%d\\\\\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The lock object here acts as a physical lock. Whenever a thread accesses the synchronized code:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`If the lock is unlocked, Java automatically locks it and allows the thread to run the code. When the thread finishes its job, Java automatically unlocks the lock.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`If it’s locked, thread just waits its turn.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here we used a simple `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object`}</MDXTag>{` as a lock, but Java provides more powerful locks in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`java.util.concurrent.locks`}</MDXTag>{` package. You can check them out if you want.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can also use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`synchronized`}</MDXTag>{` keyword on the method itself, like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-java\",\"data-language\":\"java\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token annotation punctuation\\\">@Override</span>\\n<span class=\\\"token keyword\\\">synchronized</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Thread:%s, counter:%d\\\\\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`But, `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`it won’t work`}</MDXTag>{` with our case. Here is the output:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`Thread:t1, counter:0\nThread:t2, counter:0\nThread:t2, counter:2\nThread:t2, counter:3\nThread:t2, counter:4\nThread:t2, counter:5\nThread:t2, counter:6\nThread:t2, counter:7\nThread:t2, counter:8\nThread:t2, counter:9\nThread:t1, counter:1\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`If we synchronize the method, Java uses the object’s lock. But our threads have their own objects, and `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`have their own locks`}</MDXTag>{`. Here, they don’t really do anything but locking and unlocking two separate locks without knowing about each other. It becomes the same thing as using no locks at all. It only would’ve worked if the threads were trying to access the same object.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"atomic-operations-and-volatile-keyword\"}}>{`Atomic Operations and Volatile Keyword`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An operation is `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`atomic`}</MDXTag>{`, (or `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`linearizable`}</MDXTag>{`, `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`indivisible`}</MDXTag>{`, `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`uninterruptible`}</MDXTag>{`) if it appears to the rest of the system to occur instantaneously. An atomic operation cannot stop in the middle: `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`it either happens completely, or it doesn’t happen at all`}</MDXTag>{`. In other words, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect\"}}>{`side effects`}</MDXTag>{` of an atomic operation are not visible until it finishes.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`By default, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html\"}}><MDXTag name=\"strong\" components={components} parentName=\"a\">{`Java guarantees that reading or writing a variable is an atomic operation`}</MDXTag></MDXTag>{`, unless the variable is a long or double. If the variable is declared as volatile, reads and writes become atomic even if it’s a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`long`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`double`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So, why didn’t our example `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`count++`}</MDXTag>{` work in the first place? The reason is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`++`}</MDXTag>{` decomposes into 3 operations; reading, incrementing, and writing back. Even though they’re atomic by themselves, it doesn’t prevent a thread from reading the variable while the other thread is incrementing it. To overcome this problem, we can use the atomic implementation of the integer primitive: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AtomicInteger`}</MDXTag>{`. It provides atomic versions of some composite operations, such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getAndIncrement()`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`incrementAndGet()`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getAndSet(value)`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-java\",\"data-language\":\"java\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token annotation punctuation\\\">@Override</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Thread:%s, counter:%d\\\\\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here’s the output:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`Thread:t1, counter:0\nThread:t2, counter:1\nThread:t2, counter:3\nThread:t2, counter:4\nThread:t2, counter:5\nThread:t2, counter:6\nThread:t2, counter:7\nThread:t2, counter:8\nThread:t2, counter:9\nThread:t1, counter:2\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As you can see, even though both of them could enter the while loop, they couldn’t increase the number at the same time. There are atomic implementations of many primitives. You can find them under the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`java.util.concurrent.atomic`}</MDXTag>{` package.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Next time I’ll be talking about `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`semaphores`}</MDXTag>{`, which allows us to have (at most) N number of threads accessing the same shared state at the same time. Have a great day!`}</MDXTag>\n</div>\n           </MDXTag>\n  }\n}\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"monitors\",\n    level: 3,\n    title: \"Monitors\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"atomic-operations-and-volatile-keyword\",\n    level: 3,\n    title: \"Atomic Operations and Volatile Keyword\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}"],"sourceRoot":""}