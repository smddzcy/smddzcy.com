(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{100:function(n,s,a){"use strict";function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}a.d(s,"a",function(){return t})},101:function(n,s,a){"use strict";function t(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function p(n,s,a){return s&&t(n.prototype,s),a&&t(n,a),n}a.d(s,"a",function(){return p})},102:function(n,s,a){"use strict";function t(n){return(t=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}a.d(s,"a",function(){return t})},103:function(n,s,a){"use strict";function t(n){return(t="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n){return(p="function"===typeof Symbol&&"symbol"===t(Symbol.iterator)?function(n){return t(n)}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":t(n)})(n)}function o(n,s){return!s||"object"!==p(s)&&"function"!==typeof s?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):s}a.d(s,"a",function(){return o})},104:function(n,s,a){"use strict";function t(n,s){return(t=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function p(n,s){if("function"!==typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&t(n,s)}a.d(s,"a",function(){return p})},141:function(n,s,a){"use strict";a.r(s),a.d(s,"readingTime",function(){return r}),a.d(s,"default",function(){return m}),a.d(s,"tableOfContents",function(){return d}),a.d(s,"frontMatter",function(){return y});var t=a(19),p=a(100),o=a(101),e=a(103),c=a(102),u=a(104),l=a(0),i=a.n(l),k=a(28),r={text:"7 min read",minutes:6.175,time:370500,words:1235},m=function(n){function s(n){var a;return Object(p.a)(this,s),(a=Object(e.a)(this,Object(c.a)(s).call(this,n))).layout=null,a}return Object(u.a)(s,n),Object(o.a)(s,[{key:"render",value:function(){var n=this.props,s=n.components;Object(t.a)(n,["components"]);return i.a.createElement(k.MDXTag,{name:"wrapper",components:s},i.a.createElement("div",null,i.a.createElement(k.MDXTag,{name:"p",components:s},"I talked about ",i.a.createElement("a",{href:"../2019-05-14/azure-cosmos-db-review",title:"Cosmos DB review, pros and cons"},"pros and cons of Cosmos DB")," in my previous post, and mentioned that we migrated from Cosmos DB Mongo API to SQL API with a few tricks. I\u2019m going to explain those tricks in this post."),i.a.createElement(k.MDXTag,{name:"p",components:s},"We had a large codebase (and a few separate small codebases) using Mongoose queries all over and I didn\u2019t want to change all of them to SQL queries. I find SQL queries hard to read/write/maintain, and also plain ugly. For example, a simple Mongoose query like this:"),i.a.createElement(k.MDXTag,{name:"pre",components:s},i.a.createElement(k.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">await</span> Store<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token string">\'abc\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> sort<span class="token punctuation">:</span> <span class="token punctuation">{</span> referenceNo<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(k.MDXTag,{name:"p",components:s},"Translates to a huge Cosmos DB SQL query like this:"),i.a.createElement(k.MDXTag,{name:"pre",components:s},i.a.createElement(k.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> querySpec <span class="token operator">=</span> <span class="token punctuation">{</span>\n  query<span class="token punctuation">:</span> <span class="token string">\'SELECT TOP 1 * FROM stores s WHERE s.code = @code ORDER BY s.referenceNo DESC\'</span><span class="token punctuation">,</span>\n  parameters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'@code\'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">\'abc\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// assume that your Cosmos DB container is available at `this.container`</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> result<span class="token punctuation">:</span> items <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>querySpec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(k.MDXTag,{name:"p",components:s},"You see the Mongoose query is extremely easy to write and read, while the SQL query requires lots of lines of code and a good SQL knowledge."),i.a.createElement(k.MDXTag,{name:"p",components:s},"It wasn\u2019t the only issue. Even if I loved SQL and wanted to use it everywhere, we were using lots of Mongoose features like hooks, default values, schema field properties like ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"trim")," and ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"enum"),", validations and more. Doing all of these with the SQL API seemed very scary, so I just thought writing my own Mongoose-like ORM for Cosmos DB would be much easier. That way I would keep using the amazing Mongoose API as well, so I did that."),i.a.createElement(k.MDXTag,{name:"h2",components:s,props:{id:"converting-mongo-queries-to-sql-queries"}},"Converting Mongo Queries to SQL Queries"),i.a.createElement(k.MDXTag,{name:"p",components:s},"First thing to solve was to convert Mongo queries like ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},".find")," to SQL queries with ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"SELECT"),"."),i.a.createElement(k.MDXTag,{name:"p",components:s},"Thankfully, I didn\u2019t have to reinvent the wheel. I found an amazing npm package called ",i.a.createElement(k.MDXTag,{name:"a",components:s,parentName:"p",props:{href:"https://www.npmjs.com/package/mongo-sql"}},"mongo-sql")," that converts Mongo queries to Postgres-style SQL queries, but since Cosmos DB SQL syntax was not exactly ",i.a.createElement(k.MDXTag,{name:"em",components:s,parentName:"p"},"SQL"),", it didn\u2019t work well for many queries. So I made a fork of that and patched/changed some stuff to support Cosmos DB queries, and voila. I had my Mongo-Cosmos query converter ready: ",i.a.createElement(k.MDXTag,{name:"a",components:s,parentName:"p",props:{href:"https://github.com/smddzcy/mongo-sql"}},"https://github.com/smddzcy/mongo-sql")),i.a.createElement(k.MDXTag,{name:"pre",components:s},i.a.createElement(k.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> sqlBuilder <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mongo-sql\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// from https://github.com/smddzcy/mongo-sql#master</span>\n<span class="token keyword">const</span> sql <span class="token operator">=</span> sqlBuilder<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'select\'</span><span class="token punctuation">,</span>\n  table<span class="token punctuation">:</span> <span class="token string">\'stores\'</span><span class="token punctuation">,</span>\n  where<span class="token punctuation">:</span> <span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token string">\'abc\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  order<span class="token punctuation">:</span> <span class="token punctuation">{</span> referenceNo<span class="token punctuation">:</span> <span class="token string">\'desc\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n{ query:\n   \'select * from stores where stores.code = @p1 order by stores.referenceNo desc\',\n  values: [ \'abc\' ],\n  original:\n   { type: \'select\',\n     table: \'stores\',\n     where: { code: \'abc\' },\n     order: { referenceNo: \'desc\' },\n     __defaultTable: \'stores\',\n     columns: [ \'*\' ] },\n  toString: [Function],\n  toQuery: [Function] }\n*/</span>\n<span class="token keyword">const</span> sqlStr <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// select * from stores where stores.code = @p1 order by stores.referenceNo desc</span>\n'}}})),i.a.createElement(k.MDXTag,{name:"h2",components:s,props:{id:"implementing-the-schema-class"}},"Implementing the Schema Class"),i.a.createElement(k.MDXTag,{name:"p",components:s},"The second and the last thing was implementing a ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"Schema")," class, just like Mongoose\u2019s, which supports hooks, field properties like ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"enum"),", ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"default"),", ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"trim"),", and some other features."),i.a.createElement(k.MDXTag,{name:"p",components:s},"I didn\u2019t implement all the features of Mongoose, since it would be meaningless and it would take lots of my time. I implemented a basic ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"Schema")," class that supports ",i.a.createElement(k.MDXTag,{name:"em",components:s,parentName:"p"},"enough")," of the features - features that I use. It turned out to be very easy and fun to implement. You can find the final ",i.a.createElement(k.MDXTag,{name:"inlineCode",components:s,parentName:"p"},"Schema")," class and the other related code ",i.a.createElement(k.MDXTag,{name:"a",components:s,parentName:"p",props:{href:"https://gist.github.com/smddzcy/acd58d9fc4ae0bb2102b2c5e36df6ea3"}},"in my public gist"),", but here\u2019s how it looks like:"),i.a.createElement(k.MDXTag,{name:"pre",components:s},i.a.createElement(k.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// schema.js</span>\n<span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ioredis\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> sqlBuilder <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mongo-sql\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// from https://github.com/smddzcy/mongo-sql#master</span>\n<span class="token keyword">const</span> uuid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'uuid\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> throat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'throat\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> DbError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../error/dbError\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../cast\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CosmosClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span> endpoint<span class="token punctuation">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">\'...\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token string">\'...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cacheTtl <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> autoAddedFields <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  _rid<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  _self<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  _etag<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  _attachments<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n  _ts<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Schema</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token function">addHook</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> hook</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">,</span> hook <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">_runHooks</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hooks\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">hook</span> <span class="token operator">=></span> hook<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">hook</span> <span class="token operator">=></span> hook<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> object<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> isRead <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> isRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">model<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> deleteCache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> runHooks<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timestamps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">\'createdAt\'</span> <span class="token keyword">in</span> model<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        model<span class="token punctuation">.</span>createdAt <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">\'updatedAt\'</span> <span class="token keyword">in</span> model<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        model<span class="token punctuation">.</span>updatedAt <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// map defaults etc</span>\n    <span class="token keyword">const</span> mappedModel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>runHooks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_runHooks</span><span class="token punctuation">(</span><span class="token string">\'beforeCreate\'</span><span class="token punctuation">,</span> mappedModel<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>deleteCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_deleteCacheForType</span><span class="token punctuation">(</span><span class="token string">\'sql\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedModel<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// see: https://github.com/Azure/azure-cosmos-js/issues/241</span>\n      mappedModel<span class="token punctuation">.</span>id <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_container<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>mappedModel<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">async</span> <span class="token function">_find</span><span class="token punctuation">(</span><span class="token parameter">query<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sql <span class="token operator">=</span> sqlBuilder<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'select\'</span><span class="token punctuation">,</span>\n      table<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>collection<span class="token punctuation">,</span>\n      where<span class="token punctuation">:</span> query<span class="token punctuation">,</span>\n      <span class="token operator">...</span>options<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> sqlStr <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> params <span class="token operator">=</span> sql<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`@p</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> cacheLabel <span class="token operator">=</span> sqlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/@(p\\d*)/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`\'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>name <span class="token operator">===</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\'`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// get the docs from cache or db</span>\n    <span class="token keyword">const</span> mappedDocs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getFromCacheOrSet</span><span class="token punctuation">(</span><span class="token string">\'sql\'</span><span class="token punctuation">,</span> cacheLabel<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> querySpec <span class="token operator">=</span> <span class="token punctuation">{</span>\n        query<span class="token punctuation">:</span> sqlStr<span class="token punctuation">,</span>\n        parameters<span class="token punctuation">:</span> params<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> result<span class="token punctuation">:</span> items <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_container<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>querySpec<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        enableCrossPartitionQuery<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> items<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// make the populations, if any requested</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>populate <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>populate<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>\n        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>populate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">field</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>schema<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DbError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> does not exist in the schema`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>schema<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DbError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> does not have a \'ref\' field`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Schema<span class="token punctuation">.</span>_registeredModels<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>schema<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span>ref<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DbError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>schema<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span>ref<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not a registered model`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">const</span> model <span class="token operator">=</span> Schema<span class="token punctuation">.</span>_registeredModels<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>schema<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span>ref<span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> ids <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">uniq</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span>mappedDocs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">doc</span> <span class="token operator">=></span> doc<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>\n            ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">throat</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token parameter">id</span> <span class="token operator">=></span> model<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> idToDoc <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">xs<span class="token punctuation">,</span> x<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            xs<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>docs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> xs<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          mappedDocs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">mappedDoc</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedDoc<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> idToDoc<span class="token punctuation">[</span>mappedDoc<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              mappedDoc<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> idToDoc<span class="token punctuation">[</span>mappedDoc<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              mappedDoc<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> mappedDocs<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">query<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>query <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// minor optimization</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token parameter">query<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      items <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> limit<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// single-partition query failed, try cross-partition</span>\n      items <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> Schema<span class="token punctuation">;</span>\n'}}})),i.a.createElement(k.MDXTag,{name:"p",components:s},"Also here\u2019s how a model looks like:"),i.a.createElement(k.MDXTag,{name:"pre",components:s},i.a.createElement(k.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> Schema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./schema\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> trim<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  code<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> trim<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  referenceNo<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>\n  <span class="token comment">// ... other fields</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  model<span class="token punctuation">:</span> <span class="token string">\'Store\'</span><span class="token punctuation">,</span>\n  collection<span class="token punctuation">:</span> <span class="token string">\'stores\'</span><span class="token punctuation">,</span>\n  partitionKey<span class="token punctuation">:</span> <span class="token string">\'id\'</span><span class="token punctuation">,</span>\n  timestamps<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// you can add hooks</span>\nStore<span class="token punctuation">.</span><span class="token function">addHook</span><span class="token punctuation">(</span><span class="token string">\'beforeCreate\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// auto-increment referenceNo</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">await</span> Store<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> order<span class="token punctuation">:</span> <span class="token punctuation">{</span> referenceNo<span class="token punctuation">:</span> <span class="token string">\'desc\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  obj<span class="token punctuation">.</span>referenceNo <span class="token operator">=</span> store<span class="token punctuation">.</span>referenceNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> Store<span class="token punctuation">;</span>\n'}}})),i.a.createElement(k.MDXTag,{name:"p",components:s},"Then I could use Cosmos DB as if I was using Mongoose. All of my queries are automatically turned into SQL queries:"),i.a.createElement(k.MDXTag,{name:"pre",components:s},i.a.createElement(k.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">await</span> Store<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token string">\'abc\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> order<span class="token punctuation">:</span> <span class="token punctuation">{</span> referenceNo<span class="token punctuation">:</span> <span class="token string">\'desc\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// SQL query run in the background:</span>\n<span class="token comment">// \'select * from stores where stores.code = @p1 order by stores.referenceNo desc\'</span>\n<span class="token comment">// @p1 parameter = \'abc\'</span>\n'}}})),i.a.createElement(k.MDXTag,{name:"p",components:s},"I hope this will help you deal with ugly SQL queries and actually enjoy using Cosmos DB. Have a great day!")))}}]),s}(i.a.Component),d=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"converting-mongo-queries-to-sql-queries",level:2,title:"Converting Mongo Queries to SQL Queries",children:[]},{id:"implementing-the-schema-class",level:2,title:"Implementing the Schema Class",children:[]}]},y={}}}]);
//# sourceMappingURL=31.0ce5da8c.chunk.js.map